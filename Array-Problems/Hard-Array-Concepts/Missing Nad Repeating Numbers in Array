package dsa;

public class Missing_Repeating {
	public static int[] findMissingRepeatingNumbers(int[] a) {
        long n = a.length; // size of the array
        long SN = (n * (n + 1)) / 2;
        long S2N = (n * (n + 1) * (2 * n + 1)) / 6;

        long S = 0, S2 = 0;
        for (int i = 0; i < n; i++) {
            S += a[i];
            S2 += (long) a[i] * (long) a[i];
        }

        long val1 = S - SN;
        long val2 = S2 - S2N;
        val2 = val2 / val1;

        long x = (val1 + val2) / 2;
        long y = x - val1;

        int[] ans = {(int) x, (int) y};
        return ans;
    }

    public static void main(String[] args) {
        int[] a = {3, 1, 2, 5, 4, 6, 7, 5};
        int[] ans = findMissingRepeatingNumbers(a);
        System.out.println("The repeating and missing numbers are: {"
                + ans[0] + ", " + ans[1] + "}");
    }

//    public static void main(String[] args) {
//        int arr[] = {5, 3, 6, 1, 2, 1};
//        int n = arr.length;
//        int repeating = -1;
//        int missing = -1;
//
//        for (int i = 1; i <= n; i++) {
//            int count = 0;
//            for (int j = 0; j < n; j++) {
//                if (arr[j] == i) {
//                    count++;
//                }
//            }
//            if (count == 2) {
//                repeating = i;
//                System.out.println("Repeating Num: " + repeating);
//            } else if (count == 0) {
//                missing = i;
//                System.out.println("Missing Num: " + missing);
//            }
//            if (repeating != -1 && missing != -1) {
//                break;
//            }
//        }
//    }
}
