package dsa.Binary_Search;

public class NthRootofInteger {

    public static void main(String[] args) {
        int n = 3;
        int m = 27;
        int ans = Nthroot(n, m);
        System.out.println(ans);
    }

    private static int Nthroot(int n, int m) {
        int low = 1;
        int high = m;
        while (low <= high) {
            int mid = (low + high) / 2;
            int midN = fun(mid, n, m);
            if (midN == 1) return mid;
            else if (midN < 0) low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }

    private static int fun(int mid, int n, int m) {
        long ans = 1;
        for (int i = 0; i < n; i++) { // Changed from i <= n to i < n
            ans = ans * mid;
            if (ans > m) return 2;
        }
        if (ans == m) return 1;
        return 0;
    }
}
