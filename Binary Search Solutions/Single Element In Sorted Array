package dsa.Binary_Search;

public class Single_Ele_InArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[] = {1,1,2,2,3,4,4,5,5,6,6};
		int n = arr.length;
		int k = se(arr,n);
		System.out.println("Single Element In Array Is: "+k);
	}

	private static int se(int[] arr, int n) {
		
		if(n==1) return arr[0];
		if(arr[0] != arr[1]) return arr[0];
		if(arr[n-1] != arr[n-2]) return arr[n-1];
		
		int low = 1;
		int high = n-2;
		
		while(low<=high) {
			int mid = (low+high)/2;
			
			if(arr[mid] != arr[mid+1] && arr[mid] != arr[mid-1]) return arr[mid];
			//eliminating left half
			
			if(mid % 2 == 1 && arr[mid] == arr[mid-1] ||//mid stand at odd index and check for left
			   mid % 2 == 0 && arr[mid] == arr[mid+1])//mid stand at even and check for right half
			{
				low = mid - 1;
			}
			else high = mid + 1;
					
		}
		return -1;
		
		
	}

}
