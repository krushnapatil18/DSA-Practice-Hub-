package dsa.Binary_Search;

public class Search_in_RotatedArray_withReapeatingELE {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr [] = {3,3,1,3,3,3,3};
		int n = arr.length;
		int k = 3;
		boolean a = SIRSA(arr,n,k);
        if (a == false)
            System.out.println("Target is not present.");
        else
            System.out.println("Target is present in the array.");

	}

	private static boolean SIRSA(int[] arr, int n, int k) {
		// TODO Auto-generated method stub
		int low = 0;
		int high = n-1;
		while(low<=high) {
			int mid = (low+high)/2;
			
			if (arr[mid] == k) return true;
			
			if(arr[low] == arr[mid] && arr[mid] == arr[high]) {
				low = low+1;
				high = high-1;
			}
			
			// If Left half is sorted
			if(arr[low] <= arr[mid]) {
				if(arr[low] <= k && k <= arr[mid]) {
					high = mid-1;
				}
				else low = mid+1;
			}
			// If Right is sorted
			else {
				if(arr[mid] <= k && k <= arr[high]) low = mid+1;
				
				else high = mid-1;
			}
			
		}
		
		return false;
		
	}
}
